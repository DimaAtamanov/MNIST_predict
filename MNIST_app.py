# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os.path

from tensorflow import convert_to_tensor, cast, reshape, float32, argmax
from tensorflow.keras.models import load_model
from tensorflow import image
from tensorflow import data

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QColor

# Путь до актуальной версии модели
dirname = os.path.dirname(os.path.abspath(__file__))
path_to_model = os.path.join(dirname, 'main_model.keras')

# Переопределение класса QPushButton для кастомизации кнопок
class MyPushButton(QtWidgets.QPushButton):
    def __init__(self) -> None:
        super().__init__()
        self._animation = QtCore.QPropertyAnimation(self, b"geometry", self)

    def mousePressEvent(self, event) -> None:
        """
        
        Анимация кнопки при ее нажатии

        Args:
            event (Any)
        """
        self.start_val = self.geometry()
        self.end_val = QtCore.QRect(
            self.start_val.x() - 6,
            self.start_val.y() - 3,
            self.start_val.width() + 12,
            self.start_val.height() + 6,
        )
        self._animation.stop()
        self._animation.setStartValue(self.end_val)
        self._animation.setEndValue(self.start_val)
        self._animation.start()
        super(MyPushButton, self).mousePressEvent(event)


# Переопределение класса QLabel для создания поля для рисования
class MyPainter(QtWidgets.QLabel):
    def __init__(self) -> None:
        super().__init__()

        self.setParent(ui.page_0)
        self.setGeometry(QtCore.QRect(330, 30, 250, 250))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QtCore.QSize(250, 250))
        self.setMaximumSize(QtCore.QSize(250, 250))
        self.setAlignment(QtCore.Qt.AlignmentFlag.AlignTop)
        self.canvas = QtGui.QPixmap(28, 28)
        self.canvas.setDevicePixelRatio(0.112)
        self.canvas.fill(QColor(255, 255, 255))
        self.setPixmap(self.canvas)
        self.painter = QtGui.QPainter(self.canvas)

        self.last_x, self.last_y = None, None

    def mouseMoveEvent(self, e) -> None:
        """
        
        Рисует линии при зажатой левой кнопке мыши

        Args:
            e (Any):
        """
        if self.last_x is None:
            self.last_x = e.pos().x()
            self.last_y = e.pos().y()
            return

        self.painter.begin(self.canvas)
        # self.painter.scale(0.112, 0.112)
        # Настройка свойств кисти
        mypen = self.painter.pen()
        mypen.setWidth(25)
        mypen.setCapStyle(QtCore.Qt.PenCapStyle.RoundCap)
        self.painter.setPen(mypen)
        print(e.pos().x(), e.pos().y())
        self.painter.drawLine(self.last_x, self.last_y, e.pos().x(), e.pos().y())
        self.painter.end()
        self.setPixmap(self.canvas)

        self.check_fill()

        self.last_x = e.pos().x()
        self.last_y = e.pos().y()

    def mouseReleaseEvent(self, e) -> None:
        """
        
        Сброс координат мыши при отпускании левой кнопки

        Args:
            e (Any):
        """
        self.last_x = None
        self.last_y = None

    def check_fill(self) -> None:
        """
        
        Проверка заполнености поля для рисования
        
        """
        img = self.canvas.toImage().convertToFormat(
            QtGui.QImage.Format.Format_Grayscale8
        )
        img.invertPixels()
        byte_array = QtCore.QByteArray()
        buffer = QtCore.QBuffer(byte_array)
        buffer.open(QtCore.QBuffer.OpenModeFlag.ReadWrite)
        img.save(buffer, "PNG")
        sample = image.decode_png(convert_to_tensor(buffer.data().data()))
        std_sample = cast(sample, float32) / 255

        if std_sample.numpy().sum() > 40:
            ui.but_raspoznat.setDisabled(False)

    def clear_canvas(self) -> None:
        """
        
        Отчистка поля для рисования
        
        """
        self.canvas.fill(QColor(255, 255, 255))
        self.setPixmap(self.canvas)

# Объявление класса, задающего конфигурацию окна приложения
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 400)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(600, 400))
        MainWindow.setMaximumSize(QtCore.QSize(600, 400))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(parent=self.centralwidget)
        self.stackedWidget.setEnabled(True)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 600, 400))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.stackedWidget.sizePolicy().hasHeightForWidth()
        )
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setMinimumSize(QtCore.QSize(600, 400))
        self.stackedWidget.setMaximumSize(QtCore.QSize(600, 400))
        self.stackedWidget.setMouseTracking(False)
        self.stackedWidget.setContextMenuPolicy(
            QtCore.Qt.ContextMenuPolicy.NoContextMenu
        )
        self.stackedWidget.setAutoFillBackground(False)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_0 = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.page_0.sizePolicy().hasHeightForWidth())
        self.page_0.setSizePolicy(sizePolicy)
        self.page_0.setObjectName("page_0")
        self.but_raspoznat = MyPushButton()
        self.but_raspoznat.setParent(self.page_0)
        self.but_raspoznat.setGeometry(QtCore.QRect(20, 310, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_raspoznat.setFont(font)
        self.but_raspoznat.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_raspoznat.setCheckable(False)
        self.but_raspoznat.setAutoRepeat(False)
        self.but_raspoznat.setAutoExclusive(False)
        self.but_raspoznat.setAutoRepeatDelay(300)
        self.but_raspoznat.setAutoRepeatInterval(100)
        self.but_raspoznat.setAutoDefault(False)
        self.but_raspoznat.setFlat(False)
        self.but_raspoznat.setObjectName("but_raspoznat")
        self.but_raspoznat.setDisabled(True)
        self.label_pixmap = MyPainter()
        self.textEdit = QtWidgets.QTextEdit(parent=self.page_0)
        self.textEdit.setGeometry(QtCore.QRect(20, 30, 300, 250))
        self.textEdit.setStyleSheet(
            "background-color: rgb(121, 121, 121);\n" "border-radius: 15px;"
        )
        self.textEdit.setVerticalScrollBarPolicy(
            QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff
        )
        self.textEdit.setHorizontalScrollBarPolicy(
            QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff
        )
        self.textEdit.setObjectName("textEdit")
        self.but_clear = MyPushButton()
        self.but_clear.setParent(self.page_0)
        self.but_clear.setGeometry(QtCore.QRect(330, 310, 250, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_clear.setFont(font)
        self.but_clear.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_clear.setCheckable(False)
        self.but_clear.setAutoRepeat(False)
        self.but_clear.setAutoExclusive(False)
        self.but_clear.setAutoRepeatDelay(300)
        self.but_clear.setAutoRepeatInterval(100)
        self.but_clear.setAutoDefault(False)
        self.but_clear.setFlat(False)
        self.but_clear.setObjectName("but_clear")
        self.stackedWidget.addWidget(self.page_0)
        self.page_1 = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.page_1.sizePolicy().hasHeightForWidth())
        self.page_1.setSizePolicy(sizePolicy)
        self.page_1.setObjectName("page_1")
        self.label = QtWidgets.QLabel(parent=self.page_1)
        self.label.setGeometry(QtCore.QRect(50, 40, 500, 80))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label.setFont(font)
        self.label.setStyleSheet(
            "background-color: rgb(121, 121, 121);\n" "border-radius: 15px;"
        )
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.but_neverno = MyPushButton()
        self.but_neverno.setParent(self.page_1)
        self.but_neverno.setGeometry(QtCore.QRect(150, 240, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_neverno.setFont(font)
        self.but_neverno.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_neverno.setCheckable(False)
        self.but_neverno.setAutoRepeat(False)
        self.but_neverno.setAutoExclusive(False)
        self.but_neverno.setAutoRepeatDelay(300)
        self.but_neverno.setAutoRepeatInterval(100)
        self.but_neverno.setAutoDefault(False)
        self.but_neverno.setFlat(False)
        self.but_neverno.setObjectName("but_neverno")
        self.but_repeat = MyPushButton()
        self.but_repeat.setParent(self.page_1)
        self.but_repeat.setGeometry(QtCore.QRect(150, 320, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_repeat.setFont(font)
        self.but_repeat.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_repeat.setCheckable(False)
        self.but_repeat.setAutoRepeat(False)
        self.but_repeat.setAutoExclusive(False)
        self.but_repeat.setAutoRepeatDelay(300)
        self.but_repeat.setAutoRepeatInterval(100)
        self.but_repeat.setAutoDefault(False)
        self.but_repeat.setFlat(False)
        self.but_repeat.setObjectName("but_repeat")
        self.but_verno = MyPushButton()
        self.but_verno.setParent(self.page_1)
        self.but_verno.setGeometry(QtCore.QRect(150, 160, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_verno.setFont(font)
        self.but_verno.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_verno.setCheckable(False)
        self.but_verno.setAutoRepeat(False)
        self.but_verno.setAutoExclusive(False)
        self.but_verno.setAutoRepeatDelay(300)
        self.but_verno.setAutoRepeatInterval(100)
        self.but_verno.setAutoDefault(False)
        self.but_verno.setFlat(False)
        self.but_verno.setObjectName("but_verno")
        self.stackedWidget.addWidget(self.page_1)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.label_2 = QtWidgets.QLabel(parent=self.page_2)
        self.label_2.setGeometry(QtCore.QRect(50, 40, 500, 80))
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet(
            "background-color: rgb(121, 121, 121);\n" "border-radius: 15px;"
        )
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.but_net = MyPushButton()
        self.but_net.setParent(self.page_2)
        self.but_net.setGeometry(QtCore.QRect(150, 260, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_net.setFont(font)
        self.but_net.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_net.setCheckable(False)
        self.but_net.setAutoRepeat(False)
        self.but_net.setAutoExclusive(False)
        self.but_net.setAutoRepeatDelay(300)
        self.but_net.setAutoRepeatInterval(100)
        self.but_net.setAutoDefault(False)
        self.but_net.setFlat(False)
        self.but_net.setObjectName("but_net")
        self.but_da = MyPushButton()
        self.but_da.setParent(self.page_2)
        self.but_da.setGeometry(QtCore.QRect(150, 180, 300, 60))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(False)
        self.but_da.setFont(font)
        self.but_da.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_da.setCheckable(False)
        self.but_da.setAutoRepeat(False)
        self.but_da.setAutoExclusive(False)
        self.but_da.setAutoRepeatDelay(300)
        self.but_da.setAutoRepeatInterval(100)
        self.but_da.setAutoDefault(False)
        self.but_da.setFlat(False)
        self.but_da.setObjectName("but_da")
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.gridLayoutWidget = QtWidgets.QWidget(parent=self.page_3)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 601, 401))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(20, 20, 20, 20)
        self.gridLayout.setSpacing(20)
        self.gridLayout.setObjectName("gridLayout")
        self.but_1 = MyPushButton()
        self.but_1.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_1.sizePolicy().hasHeightForWidth())
        self.but_1.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_1.setFont(font)
        self.but_1.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_1.setCheckable(False)
        self.but_1.setAutoRepeat(False)
        self.but_1.setAutoExclusive(False)
        self.but_1.setAutoRepeatDelay(300)
        self.but_1.setAutoRepeatInterval(100)
        self.but_1.setAutoDefault(False)
        self.but_1.setFlat(False)
        self.but_1.setObjectName("but_1")
        self.gridLayout.addWidget(self.but_1, 0, 1, 1, 1)
        self.but_3 = MyPushButton()
        self.but_3.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_3.sizePolicy().hasHeightForWidth())
        self.but_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_3.setFont(font)
        self.but_3.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_3.setCheckable(False)
        self.but_3.setAutoRepeat(False)
        self.but_3.setAutoExclusive(False)
        self.but_3.setAutoRepeatDelay(300)
        self.but_3.setAutoRepeatInterval(100)
        self.but_3.setAutoDefault(False)
        self.but_3.setFlat(False)
        self.but_3.setObjectName("but_3")
        self.gridLayout.addWidget(self.but_3, 0, 3, 1, 1)
        self.but_0 = MyPushButton()
        self.but_0.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_0.sizePolicy().hasHeightForWidth())
        self.but_0.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_0.setFont(font)
        self.but_0.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_0.setCheckable(False)
        self.but_0.setAutoRepeat(False)
        self.but_0.setAutoExclusive(False)
        self.but_0.setAutoRepeatDelay(300)
        self.but_0.setAutoRepeatInterval(100)
        self.but_0.setAutoDefault(False)
        self.but_0.setFlat(False)
        self.but_0.setObjectName("but_0")
        self.gridLayout.addWidget(self.but_0, 0, 0, 1, 1)
        self.but_2 = MyPushButton()
        self.but_2.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_2.sizePolicy().hasHeightForWidth())
        self.but_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_2.setFont(font)
        self.but_2.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_2.setCheckable(False)
        self.but_2.setAutoRepeat(False)
        self.but_2.setAutoExclusive(False)
        self.but_2.setAutoRepeatDelay(300)
        self.but_2.setAutoRepeatInterval(100)
        self.but_2.setAutoDefault(False)
        self.but_2.setFlat(False)
        self.but_2.setObjectName("but_2")
        self.gridLayout.addWidget(self.but_2, 0, 2, 1, 1)
        self.but_4 = MyPushButton()
        self.but_4.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_4.sizePolicy().hasHeightForWidth())
        self.but_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_4.setFont(font)
        self.but_4.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_4.setCheckable(False)
        self.but_4.setAutoRepeat(False)
        self.but_4.setAutoExclusive(False)
        self.but_4.setAutoRepeatDelay(300)
        self.but_4.setAutoRepeatInterval(100)
        self.but_4.setAutoDefault(False)
        self.but_4.setFlat(False)
        self.but_4.setObjectName("but_4")
        self.gridLayout.addWidget(self.but_4, 0, 4, 1, 1)
        self.but_5 = MyPushButton()
        self.but_5.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_5.sizePolicy().hasHeightForWidth())
        self.but_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_5.setFont(font)
        self.but_5.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_5.setCheckable(False)
        self.but_5.setAutoRepeat(False)
        self.but_5.setAutoExclusive(False)
        self.but_5.setAutoRepeatDelay(300)
        self.but_5.setAutoRepeatInterval(100)
        self.but_5.setAutoDefault(False)
        self.but_5.setFlat(False)
        self.but_5.setObjectName("but_5")
        self.gridLayout.addWidget(self.but_5, 1, 0, 1, 1)
        self.but_6 = MyPushButton()
        self.but_6.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_6.sizePolicy().hasHeightForWidth())
        self.but_6.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_6.setFont(font)
        self.but_6.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_6.setCheckable(False)
        self.but_6.setAutoRepeat(False)
        self.but_6.setAutoExclusive(False)
        self.but_6.setAutoRepeatDelay(300)
        self.but_6.setAutoRepeatInterval(100)
        self.but_6.setAutoDefault(False)
        self.but_6.setFlat(False)
        self.but_6.setObjectName("but_6")
        self.gridLayout.addWidget(self.but_6, 1, 1, 1, 1)
        self.but_7 = MyPushButton()
        self.but_7.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_7.sizePolicy().hasHeightForWidth())
        self.but_7.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_7.setFont(font)
        self.but_7.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_7.setCheckable(False)
        self.but_7.setAutoRepeat(False)
        self.but_7.setAutoExclusive(False)
        self.but_7.setAutoRepeatDelay(300)
        self.but_7.setAutoRepeatInterval(100)
        self.but_7.setAutoDefault(False)
        self.but_7.setFlat(False)
        self.but_7.setObjectName("but_7")
        self.gridLayout.addWidget(self.but_7, 1, 2, 1, 1)
        self.but_8 = MyPushButton()
        self.but_8.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_8.sizePolicy().hasHeightForWidth())
        self.but_8.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_8.setFont(font)
        self.but_8.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_8.setCheckable(False)
        self.but_8.setAutoRepeat(False)
        self.but_8.setAutoExclusive(False)
        self.but_8.setAutoRepeatDelay(300)
        self.but_8.setAutoRepeatInterval(100)
        self.but_8.setAutoDefault(False)
        self.but_8.setFlat(False)
        self.but_8.setObjectName("but_8")
        self.gridLayout.addWidget(self.but_8, 1, 3, 1, 1)
        self.but_9 = MyPushButton()
        self.but_9.setParent(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Preferred,
            QtWidgets.QSizePolicy.Policy.Preferred,
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.but_9.sizePolicy().hasHeightForWidth())
        self.but_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(71)
        font.setBold(True)
        self.but_9.setFont(font)
        self.but_9.setStyleSheet(
            """
            QPushButton { 
            background-color: rgb(121, 121, 121);
            border-radius: 30px;}
                                     
            QPushButton:hover {
            background-color: rgb(0, 144, 81);}
                                     
            """
        )
        self.but_9.setCheckable(False)
        self.but_9.setAutoRepeat(False)
        self.but_9.setAutoExclusive(False)
        self.but_9.setAutoRepeatDelay(300)
        self.but_9.setAutoRepeatInterval(100)
        self.but_9.setAutoDefault(False)
        self.but_9.setFlat(False)
        self.but_9.setObjectName("but_9")
        self.gridLayout.addWidget(self.but_9, 1, 4, 1, 1)
        self.stackedWidget.addWidget(self.page_3)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        
        # Определение пар сигнал-слот
        self.but_clear.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_clear.clicked.connect(lambda: self.but_raspoznat.setDisabled(True))

        self.but_raspoznat.clicked.connect(self.predict_num)
        self.but_raspoznat.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))

        self.but_neverno.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))

        self.but_repeat.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_repeat.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_verno.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_verno.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_da.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        self.but_net.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_net.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_0.clicked.connect(lambda: self.update_model(0))
        self.but_0.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_0.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_1.clicked.connect(lambda: self.update_model(1))
        self.but_1.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_1.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_2.clicked.connect(lambda: self.update_model(2))
        self.but_2.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_2.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_3.clicked.connect(lambda: self.update_model(3))
        self.but_3.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_3.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_4.clicked.connect(lambda: self.update_model(4))
        self.but_4.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_4.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_5.clicked.connect(lambda: self.update_model(5))
        self.but_5.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_5.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_6.clicked.connect(lambda: self.update_model(6))
        self.but_6.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_6.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_7.clicked.connect(lambda: self.update_model(7))
        self.but_7.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_7.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_8.clicked.connect(lambda: self.update_model(8))
        self.but_8.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_8.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        self.but_9.clicked.connect(lambda: self.update_model(9))
        self.but_9.clicked.connect(self.label_pixmap.clear_canvas)
        self.but_9.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))

        # Загрузка актуальной версии модели
        self.predict_model = load_model(path_to_model)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(
            _translate("MainWindow", "Распознавание рукописных цифр")
        )
        self.but_raspoznat.setText(_translate("MainWindow", "Распознать"))
        self.textEdit.setHtml(
            _translate(
                "MainWindow",
                '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">\n'
                '<html><head><meta name="qrichtext" content="1" /><meta charset="utf-8" /><style type="text/css">\n'
                "p, li { white-space: pre-wrap; }\n"
                "hr { height: 1px; border-width: 0; }\n"
                'li.unchecked::marker { content: "\\2610"; }\n'
                'li.checked::marker { content: "\\2612"; }\n'
                "</style></head><body style=\" font-family:'.AppleSystemUIFont'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
                '<p align="center" style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:18pt; color:#ffffff;">Инструкция:</span></p>\n'
                '<p align="justify" style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt; color:#ffffff;"><br /></p>\n'
                '<p align="justify" style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt; color:#ffffff;">1. Нарисуйте цифру на белом поле, расположенном в правой части окна</span></p>\n'
                '<p align="justify" style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt; color:#ffffff;"><br /></p>\n'
                '<p align="justify" style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt; color:#ffffff;">2. Нажмите на кнопку &quot;Распознать&quot;. Если кнопка &quot;Распознать&quot; неактивна, попробуйте нарисовать цифру побольше</span></p>\n'
                '<p align="justify" style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt; color:#ffffff;"><br /></p>\n'
                '<p align="justify" style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-size:14pt; color:#ffffff;">3. В случае некорректного определения цифры, при желании, можно указать какую цифру вы нарисовали. Таким образом, вы поможете нейросети стать лучше </span></p>\n'
                '<p align="justify" style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:14pt; color:#ffffff;"><br /></p></body></html>',
            )
        )
        self.but_clear.setText(_translate("MainWindow", "Отчистить поле"))
        self.label.setText(_translate("MainWindow", "Это цифра 0 с вероятностью 0 %"))
        self.but_neverno.setText(_translate("MainWindow", "Неверно"))
        self.but_repeat.setText(_translate("MainWindow", "Попробовать еще раз"))
        self.but_verno.setText(_translate("MainWindow", "Верно"))
        self.label_2.setText(
            _translate("MainWindow", "Желаете указать правильную цифру?")
        )
        self.but_net.setText(_translate("MainWindow", "Нет"))
        self.but_da.setText(_translate("MainWindow", "Да"))
        self.but_1.setText(_translate("MainWindow", "1"))
        self.but_3.setText(_translate("MainWindow", "3"))
        self.but_0.setText(_translate("MainWindow", "0"))
        self.but_2.setText(_translate("MainWindow", "2"))
        self.but_4.setText(_translate("MainWindow", "4"))
        self.but_5.setText(_translate("MainWindow", "5"))
        self.but_6.setText(_translate("MainWindow", "6"))
        self.but_7.setText(_translate("MainWindow", "7"))
        self.but_8.setText(_translate("MainWindow", "8"))
        self.but_9.setText(_translate("MainWindow", "9"))

    def predict_num(self) -> None:
        """
        
        Распознавание рукописной цифры
        
        """
        img = ui.label_pixmap.canvas.toImage().convertToFormat(
            QtGui.QImage.Format.Format_Grayscale8
        )
        img.invertPixels()
        byte_array = QtCore.QByteArray()
        buffer = QtCore.QBuffer(byte_array)
        buffer.open(QtCore.QBuffer.OpenModeFlag.ReadWrite)
        img.save(buffer, "PNG")
        self.sample = image.decode_png(convert_to_tensor(buffer.data().data()))
        self.std_sample = cast(self.sample, float32) / 255
        self.std_sample = reshape(self.std_sample, [1, 28, 28, 1])
        buffer.close()

        pred = self.predict_model.predict(self.std_sample, verbose=0)
        self.pred_num = argmax(pred, axis=1).numpy()[0]
        self.pred_proba = round(pred[0, self.pred_num] * 100, 2)
        self.label.setText(
            f"Это цифра {self.pred_num} с вероятностью {self.pred_proba} %"
        )

        self.but_raspoznat.setDisabled(True)

    def update_model(self, num) -> None:
        """
        
        Обновление модели при некорректном распознавании

        Args:
            num (int): Цифра, указанная пользователем
        """
        self.page_3.setCursor(QtCore.Qt.CursorShape.WaitCursor)
        self.std_sample = reshape(self.std_sample, [28,28,1])
        fit_sample = data.Dataset.zip(data.Dataset.from_tensors(self.std_sample), data.Dataset.from_tensors(num))
        fit_sample = fit_sample.batch(1)
        self.predict_model.fit(
            fit_sample,
            epochs=5,
            verbose=0,
        )
        self.predict_model.save(path_to_model)
        self.predict_model = load_model(path_to_model)
        self.page_3.setCursor(QtCore.Qt.CursorShape.ArrowCursor)
        
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
